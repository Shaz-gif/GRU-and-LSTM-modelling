{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4c2ba201",
   "metadata": {
    "_cell_guid": "99ad48ae-6ae5-4ded-a498-d5406144d7d5",
    "_uuid": "58d11618-4015-41e9-9f00-b005e54f1add",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-07-04T10:51:09.324809Z",
     "iopub.status.busy": "2024-07-04T10:51:09.324471Z",
     "iopub.status.idle": "2024-07-04T10:51:23.122038Z",
     "shell.execute_reply": "2024-07-04T10:51:23.121225Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 13.804926,
     "end_time": "2024-07-04T10:51:23.124213",
     "exception": false,
     "start_time": "2024-07-04T10:51:09.319287",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-07-04 10:51:12.982350: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-07-04 10:51:12.982462: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-07-04 10:51:13.160326: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import LSTM, GRU, Dense\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.callbacks import ReduceLROnPlateau\n",
    "import matplotlib.pyplot as plt\n",
    "from itertools import product\n",
    "\n",
    "# Load data\n",
    "train_df = pd.read_csv('/kaggle/input/daily-climate-time-series-data/DailyDelhiClimateTrain.csv')  # Replace with your train file name\n",
    "test_df = pd.read_csv('/kaggle/input/daily-climate-time-series-data/DailyDelhiClimateTest.csv')  # Replace with your test file name\n",
    "\n",
    "# Convert date to datetime and set as index\n",
    "train_df['date'] = pd.to_datetime(train_df['date'])\n",
    "test_df['date'] = pd.to_datetime(test_df['date'])\n",
    "train_df.set_index('date', inplace=True)\n",
    "test_df.set_index('date', inplace=True)\n",
    "\n",
    "# Select features for prediction\n",
    "features = ['humidity', 'wind_speed']\n",
    "target = 'meantemp'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "83f9515d",
   "metadata": {
    "_cell_guid": "99ad48ae-6ae5-4ded-a498-d5406144d7d5",
    "_uuid": "58d11618-4015-41e9-9f00-b005e54f1add",
    "collapsed": false,
    "execution": {
     "iopub.execute_input": "2024-07-04T10:51:23.133025Z",
     "iopub.status.busy": "2024-07-04T10:51:23.132720Z",
     "iopub.status.idle": "2024-07-04T11:10:15.915415Z",
     "shell.execute_reply": "2024-07-04T11:10:15.914460Z"
    },
    "jupyter": {
     "outputs_hidden": false
    },
    "papermill": {
     "duration": 1132.789701,
     "end_time": "2024-07-04T11:10:15.917861",
     "exception": false,
     "start_time": "2024-07-04T10:51:23.128160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid search for LSTM:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "I0000 00:00:1720090288.465569      68 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.033729083836078644\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03136437013745308\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.033584870398044586\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03401258960366249\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.030965657904744148\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03249004855751991\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.029137900099158287\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.02569057233631611\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.030278664082288742\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.033360160887241364\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03615231066942215\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.034298840910196304\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.02785525657236576\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.029637668281793594\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.031603556126356125\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03190546855330467\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.03437120094895363\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.031058086082339287\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03487797826528549\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.032292794436216354\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.03088727593421936\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.032628729939460754\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.032195739448070526\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03128339350223541\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.03302894905209541\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03157126531004906\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.029085801914334297\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.0339951291680336\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.028806988149881363\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03101634979248047\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.031571775674819946\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03159186244010925\n",
      "\n",
      "Grid search for GRU:\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.03226698935031891\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.030243460088968277\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.033615220338106155\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.026433734223246574\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.030513720586895943\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.031093381345272064\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03018009476363659\n",
      "Params: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03526108339428902\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.03458832576870918\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03324982151389122\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.032908596098423004\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03446824103593826\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.030478473752737045\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03081081248819828\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.030887508764863014\n",
      "Params: {'units': 32, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03359224274754524\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.032942648977041245\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.03130679205060005\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03144257888197899\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.032818753272295\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.030611535534262657\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.029971342533826828\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03347284719347954\n",
      "Params: {'units': 64, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.02942044287919998\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.032835569232702255\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.030396927148103714\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03251856565475464\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03236241266131401\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 50}, Val Loss: 0.0282440148293972\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 32, 'epochs': 100}, Val Loss: 0.030562298372387886\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 50}, Val Loss: 0.03300854191184044\n",
      "Params: {'units': 64, 'layers': 2, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}, Val Loss: 0.03126475214958191\n",
      "\n",
      "Best LSTM parameters: {'units': 32, 'layers': 1, 'learning_rate': 0.01, 'batch_size': 64, 'epochs': 100}\n",
      "Best GRU parameters: {'units': 32, 'layers': 1, 'learning_rate': 0.001, 'batch_size': 64, 'epochs': 100}\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 160ms/step - loss: 0.0358\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 144ms/step - loss: 0.0377\n",
      "LSTM Test Loss: 0.032109230756759644\n",
      "GRU Test Loss: 0.033526141196489334\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 210ms/step\n",
      "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 236ms/step\n",
      "LSTM RMSE: 5.86208848363035\n",
      "GRU RMSE: 5.9900331200367125\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Normalize the data\n",
    "scaler = MinMaxScaler()\n",
    "train_scaled = scaler.fit_transform(train_df[features + [target]])\n",
    "test_scaled = scaler.transform(test_df[features + [target]])\n",
    "\n",
    "# Create sequences\n",
    "def create_sequences(data, seq_length):\n",
    "    X, y = [], []\n",
    "    for i in range(len(data) - seq_length):\n",
    "        X.append(data[i:(i + seq_length), :len(features)])\n",
    "        y.append(data[i + seq_length, -1])  # Predict mean temperature\n",
    "    return np.array(X), np.array(y)\n",
    "\n",
    "seq_length = 7  # Use 7 days of data to predict the next day\n",
    "X_train, y_train = create_sequences(train_scaled, seq_length)\n",
    "X_test, y_test = create_sequences(test_scaled, seq_length)\n",
    "\n",
    "# Create model functions\n",
    "def create_lstm_model(units, layers, learning_rate):\n",
    "    model = Sequential()\n",
    "    model.add(LSTM(units, activation='relu', input_shape=(seq_length, len(features)), return_sequences=True))\n",
    "    for _ in range(layers - 1):\n",
    "        model.add(LSTM(units, activation='relu', return_sequences=True))\n",
    "    model.add(LSTM(units, activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer=Adam(learning_rate=learning_rate), loss='mse')\n",
    "    return model\n",
    "\n",
    "def create_gru_model(units, layers, learning_rate):\n",
    "    model = Sequential()\n",
    "    model.add(GRU(units, activation='relu', input_shape=(seq_length, len(features)), return_sequences=True))\n",
    "    for _ in range(layers - 1):\n",
    "        model.add(GRU(units, activation='relu', return_sequences=True))\n",
    "    model.add(GRU(units, activation='relu'))\n",
    "    model.add(Dense(1))\n",
    "    model.compile(optimizer=Adam(learning_rate=learning_rate), loss='mse')\n",
    "    return model\n",
    "\n",
    "# Define parameter grid for grid search\n",
    "param_grid = {\n",
    "    'units': [32, 64],\n",
    "    'layers': [1, 2],\n",
    "    'learning_rate': [0.001, 0.01],\n",
    "    'batch_size': [32, 64],\n",
    "    'epochs': [50, 100]\n",
    "}\n",
    "\n",
    "\n",
    "reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.0001)\n",
    "\n",
    "\n",
    "def grid_search(model_func, param_grid, X_train, y_train):\n",
    "    best_model = None\n",
    "    best_params = None\n",
    "    best_val_loss = float('inf')\n",
    "    \n",
    "    for params in product(*param_grid.values()):\n",
    "        current_params = dict(zip(param_grid.keys(), params))\n",
    "        model = model_func(current_params['units'], current_params['layers'], current_params['learning_rate'])\n",
    "        history = model.fit(\n",
    "            X_train, y_train,\n",
    "            epochs=current_params['epochs'],\n",
    "            batch_size=current_params['batch_size'],\n",
    "            validation_split=0.2,\n",
    "            callbacks=[reduce_lr],\n",
    "            verbose=0\n",
    "        )\n",
    "        val_loss = min(history.history['val_loss'])\n",
    "        \n",
    "        if val_loss < best_val_loss:\n",
    "            best_val_loss = val_loss\n",
    "            best_model = model\n",
    "            best_params = current_params\n",
    "        \n",
    "        print(f\"Params: {current_params}, Val Loss: {val_loss}\")\n",
    "    \n",
    "    return best_model, best_params\n",
    "\n",
    "\n",
    "print(\"Grid search for LSTM:\")\n",
    "best_lstm_model, best_lstm_params = grid_search(create_lstm_model, param_grid, X_train, y_train)\n",
    "\n",
    "\n",
    "print(\"\\nGrid search for GRU:\")\n",
    "best_gru_model, best_gru_params = grid_search(create_gru_model, param_grid, X_train, y_train)\n",
    "\n",
    "\n",
    "print(\"\\nBest LSTM parameters:\", best_lstm_params)\n",
    "print(\"Best GRU parameters:\", best_gru_params)\n",
    "\n",
    "# Evaluate models\n",
    "lstm_loss = best_lstm_model.evaluate(X_test, y_test)\n",
    "gru_loss = best_gru_model.evaluate(X_test, y_test)\n",
    "\n",
    "print(f\"LSTM Test Loss: {lstm_loss}\")\n",
    "print(f\"GRU Test Loss: {gru_loss}\")\n",
    "\n",
    "# Function to make predictions\n",
    "def make_predictions(model, data):\n",
    "    predictions = model.predict(data)\n",
    "    dummy = np.zeros((len(predictions), len(features) + 1))\n",
    "    dummy[:, -1] = predictions.flatten()\n",
    "    predictions_original = scaler.inverse_transform(dummy)[:, -1]\n",
    "    return predictions_original\n",
    "\n",
    "# Make predictions\n",
    "lstm_predictions = make_predictions(best_lstm_model, X_test)\n",
    "gru_predictions = make_predictions(best_gru_model, X_test)\n",
    "\n",
    "# Convert test data back to original scale\n",
    "y_test_original = scaler.inverse_transform(test_scaled)[seq_length:, -1]\n",
    "\n",
    "# Calculate RMSE\n",
    "lstm_rmse = np.sqrt(np.mean((lstm_predictions - y_test_original) ** 2))\n",
    "gru_rmse = np.sqrt(np.mean((gru_predictions - y_test_original) ** 2))\n",
    "\n",
    "print(f\"LSTM RMSE: {lstm_rmse}\")\n",
    "print(f\"GRU RMSE: {gru_rmse}\")\n",
    "\n",
    "# Plot results\n",
    "plt.figure(figsize=(12, 6))\n",
    "plt.plot(y_test_original, label='Actual')\n",
    "plt.plot(lstm_predictions, label='LSTM Predictions')\n",
    "plt.plot(gru_predictions, label='GRU Predictions')\n",
    "plt.legend()\n",
    "plt.title('Mean Temperature Predictions')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Temperature')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d911beed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:15.940804Z",
     "iopub.status.busy": "2024-07-04T11:10:15.940516Z",
     "iopub.status.idle": "2024-07-04T11:10:16.017669Z",
     "shell.execute_reply": "2024-07-04T11:10:16.016916Z"
    },
    "papermill": {
     "duration": 0.091021,
     "end_time": "2024-07-04T11:10:16.019873",
     "exception": false,
     "start_time": "2024-07-04T11:10:15.928852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_percentage_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5cc03e57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:16.043259Z",
     "iopub.status.busy": "2024-07-04T11:10:16.042968Z",
     "iopub.status.idle": "2024-07-04T11:10:16.056337Z",
     "shell.execute_reply": "2024-07-04T11:10:16.055479Z"
    },
    "papermill": {
     "duration": 0.027108,
     "end_time": "2024-07-04T11:10:16.058219",
     "exception": false,
     "start_time": "2024-07-04T11:10:16.031111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def smape(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Symmetrical Mean Absolute Percentage Error (sMAPE)\n",
    "    \"\"\"\n",
    "    ans = (200.0 / len(y_pred)) * np.sum(np.abs(y_actual - y_pred) / (np.abs(y_actual + y_pred)))\n",
    "    print(f\"sMAPE: {ans:.2f}%\")\n",
    "    return ans\n",
    "\n",
    "def mase(y_pred, y_actual, seasonality=1):\n",
    "    \"\"\"\n",
    "    Mean Absolute Scaled Error (MASE)\n",
    "    \"\"\"\n",
    "    n = len(y_actual)\n",
    "    d = np.sum(np.abs(np.diff(y_actual, n=seasonality)))\n",
    "    q = np.sum(np.abs(y_actual - y_pred))\n",
    "    ans = (n / (n - seasonality)) * (q / d)\n",
    "    print(f\"MASE: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def rho_u(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Mean Wrong-Estimation Shares (ρU)\n",
    "    \"\"\"\n",
    "    ans = np.mean(np.maximum(np.sign(y_actual - y_pred), 0))\n",
    "    print(f\"ρU: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def rho_o(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Mean Wrong-Estimation Shares (ρO)\n",
    "    \"\"\"\n",
    "    ans = np.mean(np.maximum(np.sign(y_pred - y_actual), 0))\n",
    "    print(f\"ρO: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def delta_u(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Mean Wrong-Accuracy Shares (δU)\n",
    "    \"\"\"\n",
    "    rho_u_val = rho_u(y_pred, y_actual)\n",
    "    if rho_u_val > 0:\n",
    "        ans = np.mean(np.maximum(y_actual - y_pred, 0) / np.abs(y_actual)) / rho_u_val\n",
    "    else:\n",
    "        ans = 0\n",
    "    print(f\"δU: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def delta_o(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Mean Wrong-Accuracy Shares (δO)\n",
    "    \"\"\"\n",
    "    rho_o_val = rho_o(y_pred, y_actual)\n",
    "    if rho_o_val > 0:\n",
    "        ans = np.mean(np.maximum(y_pred - y_actual, 0) / np.abs(y_actual)) / rho_o_val\n",
    "    else:\n",
    "        ans = 0\n",
    "    print(f\"δO: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def mean_squared_error_(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Mean Squared Error (MSE)\n",
    "    \"\"\"\n",
    "    ans = np.mean((y_pred-y_actual)*(y_pred-y_actual))\n",
    "    print(f\"MSE: {ans:.2f}\")\n",
    "    return ans\n",
    "\n",
    "def r_squared(y_pred, y_actual):\n",
    "    \"\"\"\n",
    "    Coefficient of Determination (R²)\n",
    "    \"\"\"\n",
    "    r2 = r2_score(y_actual, y_pred)\n",
    "    print(f\"R²: {r2:.2f}\")\n",
    "    return r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ecff52dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:16.080847Z",
     "iopub.status.busy": "2024-07-04T11:10:16.080370Z",
     "iopub.status.idle": "2024-07-04T11:10:16.084190Z",
     "shell.execute_reply": "2024-07-04T11:10:16.083385Z"
    },
    "papermill": {
     "duration": 0.017127,
     "end_time": "2024-07-04T11:10:16.085998",
     "exception": false,
     "start_time": "2024-07-04T11:10:16.068871",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_true = y_test_original\n",
    "y_pred = lstm_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5758cd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:16.108527Z",
     "iopub.status.busy": "2024-07-04T11:10:16.108058Z",
     "iopub.status.idle": "2024-07-04T11:10:16.121228Z",
     "shell.execute_reply": "2024-07-04T11:10:16.120146Z"
    },
    "papermill": {
     "duration": 0.02661,
     "end_time": "2024-07-04T11:10:16.123284",
     "exception": false,
     "start_time": "2024-07-04T11:10:16.096674",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "==================================================\n",
      "Mean Absolute Percentage Error 0.28061636016631614\n",
      "==================================================\n",
      "MSE: 34.36\n",
      "Mean Squared Error 34.364081389911576\n",
      "==================================================\n",
      "RMSE 5.86208848363035\n",
      "Root Mean Squared Error 5.86208848363035\n",
      "==================================================\n",
      "sMAPE: 23.36%\n",
      "Symmetrical Mean Absolute Percentage Error (sMAPE) 23.36266041483006\n",
      "==================================================\n",
      "MASE: 4.08\n",
      "Mean Absolute Scaled Error (MASE) 4.076768254591588\n",
      "==================================================\n",
      "ρU: 0.07\n",
      "Mean Wrong-Estimation Shares (ρU) 0.07476635514018691\n",
      "==================================================\n",
      "ρO: 0.93\n",
      "Mean Wrong-Estimation Shares (ρO) 0.9252336448598131\n",
      "==================================================\n",
      "ρU: 0.07\n",
      "δU: 0.07\n",
      "Mean Wrong-Estimation Shares (δU) 0.06593274776584554\n",
      "==================================================\n",
      "ρO: 0.93\n",
      "δO: 0.30\n",
      "Mean Wrong-Estimation Shares (δO) 0.2979645308653441\n",
      "==================================================\n",
      "R²: 0.17\n",
      "Cofficient of Determination (R²) 0.16863280792901736\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*50)\n",
    "print(\"=\"*50)\n",
    "mape=mean_absolute_percentage_error(y_true, y_pred)\n",
    "print(\"Mean Absolute Percentage Error\", mape)\n",
    "print(\"=\"*50)\n",
    "mse=mean_squared_error_(y_true, y_pred)\n",
    "print(\"Mean Squared Error\",mse)\n",
    "print(\"=\"*50)\n",
    "print(\"RMSE\", (mse)**0.5)\n",
    "print(\"Root Mean Squared Error\", (mse)**0.5)\n",
    "print(\"=\"*50)\n",
    "smape_ = smape(y_pred,y_true)\n",
    "print(\"Symmetrical Mean Absolute Percentage Error (sMAPE)\", smape_)\n",
    "print(\"=\"*50)\n",
    "mase_ = mase(y_pred,y_true)\n",
    "print(\"Mean Absolute Scaled Error (MASE)\" , mase_)\n",
    "print(\"=\"*50)\n",
    "rho_u_ = rho_u(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (ρU)\", rho_u_)\n",
    "print(\"=\"*50)\n",
    "rho_o_ = rho_o(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (ρO)\", rho_o_)\n",
    "print(\"=\"*50)\n",
    "delta_u_ = delta_u(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (δU)\", delta_u_)\n",
    "print(\"=\"*50)\n",
    "delta_o_ = delta_o(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (δO)\", delta_o_)\n",
    "print(\"=\"*50)\n",
    "r_squared_ = r_squared(y_pred,y_true)\n",
    "print(\"Cofficient of Determination (R²)\", r_squared_)\n",
    "print(\"=\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "90a3d18e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:16.146004Z",
     "iopub.status.busy": "2024-07-04T11:10:16.145720Z",
     "iopub.status.idle": "2024-07-04T11:10:16.149345Z",
     "shell.execute_reply": "2024-07-04T11:10:16.148512Z"
    },
    "papermill": {
     "duration": 0.017174,
     "end_time": "2024-07-04T11:10:16.151285",
     "exception": false,
     "start_time": "2024-07-04T11:10:16.134111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred = gru_predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "46ac92bd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-04T11:10:16.173756Z",
     "iopub.status.busy": "2024-07-04T11:10:16.173494Z",
     "iopub.status.idle": "2024-07-04T11:10:16.184297Z",
     "shell.execute_reply": "2024-07-04T11:10:16.183467Z"
    },
    "papermill": {
     "duration": 0.024723,
     "end_time": "2024-07-04T11:10:16.186728",
     "exception": false,
     "start_time": "2024-07-04T11:10:16.162005",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "==================================================\n",
      "==================================================\n",
      "Mean Absolute Percentage Error 0.2883451596624466\n",
      "==================================================\n",
      "MSE: 35.88\n",
      "Mean Squared Error 35.880496779136756\n",
      "==================================================\n",
      "RMSE 5.9900331200367125\n",
      "Root Mean Squared Error 5.9900331200367125\n",
      "==================================================\n",
      "sMAPE: 23.91%\n",
      "Symmetrical Mean Absolute Percentage Error (sMAPE) 23.905168990024833\n",
      "==================================================\n",
      "MASE: 4.17\n",
      "Mean Absolute Scaled Error (MASE) 4.174004733976604\n",
      "==================================================\n",
      "ρU: 0.08\n",
      "Mean Wrong-Estimation Shares (ρU) 0.08411214953271028\n",
      "==================================================\n",
      "ρO: 0.92\n",
      "Mean Wrong-Estimation Shares (ρO) 0.9158878504672897\n",
      "==================================================\n",
      "ρU: 0.08\n",
      "δU: 0.06\n",
      "Mean Wrong-Estimation Shares (δU) 0.05597416669924437\n",
      "==================================================\n",
      "ρO: 0.92\n",
      "δO: 0.31\n",
      "Mean Wrong-Estimation Shares (δO) 0.3096853528937612\n",
      "==================================================\n",
      "R²: 0.13\n",
      "Cofficient of Determination (R²) 0.13194630408074415\n",
      "==================================================\n"
     ]
    }
   ],
   "source": [
    "print(\"=\"*50)\n",
    "print(\"=\"*50)\n",
    "mape=mean_absolute_percentage_error(y_true, y_pred)\n",
    "print(\"Mean Absolute Percentage Error\", mape)\n",
    "print(\"=\"*50)\n",
    "mse=mean_squared_error_(y_true, y_pred)\n",
    "print(\"Mean Squared Error\",mse)\n",
    "print(\"=\"*50)\n",
    "print(\"RMSE\", (mse)**0.5)\n",
    "print(\"Root Mean Squared Error\", (mse)**0.5)\n",
    "print(\"=\"*50)\n",
    "smape_ = smape(y_pred,y_true)\n",
    "print(\"Symmetrical Mean Absolute Percentage Error (sMAPE)\", smape_)\n",
    "print(\"=\"*50)\n",
    "mase_ = mase(y_pred,y_true)\n",
    "print(\"Mean Absolute Scaled Error (MASE)\" , mase_)\n",
    "print(\"=\"*50)\n",
    "rho_u_ = rho_u(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (ρU)\", rho_u_)\n",
    "print(\"=\"*50)\n",
    "rho_o_ = rho_o(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (ρO)\", rho_o_)\n",
    "print(\"=\"*50)\n",
    "delta_u_ = delta_u(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (δU)\", delta_u_)\n",
    "print(\"=\"*50)\n",
    "delta_o_ = delta_o(y_pred,y_true)\n",
    "print(\"Mean Wrong-Estimation Shares (δO)\", delta_o_)\n",
    "print(\"=\"*50)\n",
    "r_squared_ = r_squared(y_pred,y_true)\n",
    "print(\"Cofficient of Determination (R²)\", r_squared_)\n",
    "print(\"=\"*50)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 312121,
     "sourceId": 636393,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30732,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1153.639864,
   "end_time": "2024-07-04T11:10:20.212766",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-04T10:51:06.572902",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
